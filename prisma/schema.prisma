generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  clerkUserId String    @unique
  name        String
  email       String
  image       String?
  bio         String?
  website     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  roleId      String
  joueurs     Joueur[]
  Tournoi     Tournoi[]
  role        Role      @relation(fields: [roleId], references: [id])
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model InscriptionTournoi {
  id        Int      @id @default(autoincrement())
  joueurId  Int
  tournoiId Int
  createdAt DateTime @default(now())
  joueur    Joueur   @relation(fields: [joueurId], references: [id], onDelete: Cascade)
  tournoi   Tournoi  @relation(fields: [tournoiId], references: [id], onDelete: Cascade)

  @@unique([joueurId, tournoiId])
}

model Joueur {
  id                  Int                  @id @default(autoincrement())
  dossard             Int                  @unique
  numeroLicence       String               @unique
  nom                 String
  prenom              String
  email               String?              @unique
  mobile              String?
  club                String?
  pointsOfficiel      Float?
  userId              String
  createdAt           DateTime             @default(now())
  sexe                Int?                 @db.SmallInt
  engagement          Engagement[]
  inscriptionsTournoi InscriptionTournoi[]
  user                User                 @relation(fields: [userId], references: [id])
}

model Tournoi {
  id                   Int                  @id @default(autoincrement())
  nom                  String
  lieu                 String?
  description          String?
  debut                DateTime
  fin                  DateTime
  statut               StatutTournoi        @default(BROUILLON)
  responsableNom       String?
  responsableEmail     String?
  responsableTelephone String?
  afficheUrl           String?
  reglementUrl         String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  userId               String
  events               Event[]
  joueursInscrits      InscriptionTournoi[]
  user                 User                 @relation(fields: [userId], references: [id])
}

model Event {
  id           Int          @id @default(autoincrement())
  nom          String
  date         DateTime
  jour         String
  heure        String
  tableau      String
  categorie    String?
  minPoints    Int?
  maxPoints    Int?
  prixAnticipe Float
  prixSurPlace Float
  placesMax    Int?
  etat         EtatEvent    @default(OUVERT)
  tournoiId    Int
  engagements  Engagement[]
  tournoi      Tournoi      @relation(fields: [tournoiId], references: [id])

  @@unique([date, heure, tableau])
}

model Engagement {
  id             Int      @id @default(autoincrement())
  joueurId       Int
  eventId        Int
  dateEngagement DateTime @default(now())
  modePaiement   String?
  event          Event    @relation(fields: [eventId], references: [id])
  joueur         Joueur   @relation(fields: [joueurId], references: [id], onDelete: Cascade)

  @@unique([joueurId, eventId])
}

enum StatutTournoi {
  BROUILLON
  PUBLIE
}

enum EtatEvent {
  OUVERT
  COMPLET
  ANNULE
}
